import React, { useState } from "react";
import { useUser } from "../context/UserContext";
import { generateImageFromText } from "../services/aiService";
import "../styles/TestImageGeneration.css";

const TestImageGeneration = () => {
  const { user } = useUser();
  const [prompt, setPrompt] = useState("");
  const [generatedImage, setGeneratedImage] = useState(null);
  const [error, setError] = useState(null);
  const [isGenerating, setIsGenerating] = useState(false);

  const handleGenerateImage = async () => {
    if (!prompt) {
      setError("Please enter a prompt to generate an image.");
      return;
    }

    if (!user) {
      setError("You must be logged in to generate an image.");
      return;
    }

    setError(null);
    setIsGenerating(true);
    setGeneratedImage(null);

    try {
      const image = await generateImageFromText(prompt, {
        userId: user.uid,
        symbolId: `test-image-${Date.now()}`, // Unique ID for caching
        size: "1024x768", // Grok's default resolution
      });
      setGeneratedImage(image);
    } catch (err) {
      console.error("Error generating test image:", err);
      setError(err.message || "Failed to generate image. Please try again.");
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <div className="test-image-generation">
      <h1>Test Grok Image Generation</h1>
      <div className="input-container">
        <label htmlFor="test-prompt">Enter a prompt for Grok:</label>
        <textarea
          id="test-prompt"
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
          placeholder="e.g., A simple, colorful icon of a book"
          rows={4}
          disabled={isGenerating}
        />
      </div>
      <button
        onClick={handleGenerateImage}
        className="generate-button"
        disabled={isGenerating}
      >
        {isGenerating ? "Generating..." : "Generate Image with Grok"}
      </button>
      {error && <p className="error">{error}</p>}
      {generatedImage && (
        <div className="generated-image-container">
          <h2>Generated Image:</h2>
          <img
            src={generatedImage}
            alt="Generated by Grok Aurora"
            className="generated-image"
          />
        </div>
      )}
    </div>
  );
};

export default TestImageGeneration;
